plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
    id 'java'
    id 'java-library'
}

repositories {
    mavenCentral()
    maven { url "https://maven.terraformersmc.com/releases/" }
    // Because im too lazy to write my own rendering code, deal with it :)
    maven { url "https://masa.dy.fi/maven"}
    // config code
    maven { url "https://maven.shedaniel.me/" }
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

import com.modrinth.minotaur.TaskModrinthUpload

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.minecraft_version+'-'+project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/barium.accesswidener")
}

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
   modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

   modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}", {
       exclude module: 'fabric-api'
   }
   include "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}"



    modImplementation "me.shedaniel.cloth:cloth-config-fabric:5.0.38", {
        exclude module: 'fabric-api'
    }
    include "me.shedaniel.cloth:cloth-config-fabric:5.0.38"

    modApi ("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    include(modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version)))
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

//	from(sourceSets.main.resources.srcDirs) {
//		exclude "fabric.mod.json"
//	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }

}

task publishModrinth(type: TaskModrinthUpload) {
    onlyIf {
        System.getenv("MODRINTH") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
    }

    token = System.getenv("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'ix7awaPr'
    versionNumber = project.property("mod_version") // Will fail if Modrinth has this version already
    // On fabric, use 'remapJar' instead of 'jar'
    uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
    addGameVersion(project.property("minecraft_version") as String) // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
    addLoader('fabric')
}
